#!/usr/bin/python

#
# Strip out any tidy warnings that are generated by code in the Qt
# header files.  These cannot be fixed by the MythTV developers.
#

import os
import re
import stat
import sys
import subprocess
from pathlib import Path

#
# Remove misc-no-recursion warnings caused by the Qt toolkit
#
def clean_misc_no_recursion(lines):
    to_delete = {}
    for i,line in enumerate(lines):
        if line.find('[misc-no-recursion]') == -1:
            continue
        if lines[i+1].find('Q_DECLARE_METATYPE') >= 0:
            to_delete[i] = i+9
        elif lines[i+1].find('Q_DECL_CONSTEXPR') >= 0:
            to_delete[i] = i+28
    keys = list(to_delete.keys())
    keys.sort()
    for start in reversed(keys):
        lines = lines[:start] + lines[to_delete[start]:]
    return lines


#
# Remove modernize-type-traits caused by the Qt toolkit
#
def clean_modernize_type_traits(lines):
    to_delete = {}
    for i,line in enumerate(lines):
        if line.find('[modernize-type-traits]') == -1:
            continue
        if lines[i+1].find('Q_GLOBAL_STATIC_WITH_ARGS') >= 0:
            to_delete[i] = i+9
        elif lines[i+1].find('Q_GLOBAL_STATIC') >= 0:
            to_delete[i] = i+12
        elif lines[i+1].find('QFETCH') >= 0:
            to_delete[i] = i+6
    keys = list(to_delete.keys())
    keys.sort()
    for start in reversed(keys):
        lines = lines[:start] + lines[to_delete[start]:]
    return lines


#
# Remove performance-enum-size warnings caused by the Qt toolkit
#
def clean_performance_enum_size(lines):
    print('clean_performance_enum_size called', file=sys.stderr)
    to_delete = {}
    for i,line in enumerate(lines):
        if line.find('[performance-enum-size]') == -1:
            continue
        if lines[i+1].find('Q_DECLARE_METATYPE') >= 0:
            to_delete[i] = i+9
        elif (lines[i+1].find('QStringLiteral') >= 0
              or lines[i+1].find('ByteArrayLiteral') >= 0):
            to_delete[i] = i+6
    keys = list(to_delete.keys())
    keys.sort()
    for start in reversed(keys):
        lines = lines[:start] + lines[to_delete[start]:]
    return lines


#
# Remove performance-no-int-to-ptr warnings caused by the Qt toolkit
#
def clean_performance_no_int_to_ptr(lines):
    to_delete = {}
    for i,line in enumerate(lines):
        if line.find('[performance-no-int-to-ptr]') == -1:
            continue
        if lines[i+1].find('Q_DECLARE_METATYPE') >= 0:
            to_delete[i] = i+9
    keys = list(to_delete.keys())
    keys.sort()
    for start in reversed(keys):
        lines = lines[:start] + lines[to_delete[start]:]
    return lines


#
# Remove performance-no-int-to-ptr warnings caused by the Qt toolkit
#
def clean_readability_math_missing_parentheses(lines):
    to_delete = {}
    for i,line in enumerate(lines):
        if line.find('[readability-math-missing-parentheses]') == -1:
            continue
        if lines[i+3].find('qstringliteral.h') >= 0:
            to_delete[i] = i+6
        elif lines[i+6].find('qstringliteral.h') >= 0:
            to_delete[i] = i+9
    keys = list(to_delete.keys())
    keys.sort()
    for start in reversed(keys):
        lines = lines[:start] + lines[to_delete[start]:]
    return lines


def clean_lines(lines):
    re1 = re.compile(r'/[^\.\./]+/../')
    re2 = re.compile(r'/\./')
    re3 = re.compile(r'^\./')
    re4 = re.compile('^decoders/')
    re5 = re.compile('^'+str(Path.cwd().parent)+'/myth[^/]+/[^/]+/[^/]+/')
    re6 = re.compile(r'\x1B\[[\d;]+m')

    for i,line in enumerate(lines):
        # Fix /blah/../
        match = re.search(re1, line)
        while match is not None:
            line = re.sub(re1, '/', line, 1)
            match = re.search(re1, line)

        # Fix /./ and ./
        match = re.search(re2, line)
        while match is not None:
            line = re.sub(re2, '/', line ,1)
            match = re.search(re2, line)
        line = re.sub(re3, '', line ,1)

        line = re.sub(re4, '', line)
        line = re.sub(re5, '', line)

        # Remove ncurses color commands
        line = re.sub(re6, '', line)

        lines[i] = line

    lines = clean_misc_no_recursion(lines)
    lines = clean_modernize_type_traits(lines)
    lines = clean_performance_enum_size(lines)
    lines = clean_performance_no_int_to_ptr(lines)
    lines = clean_readability_math_missing_parentheses(lines)
    return lines

def process_file(filein):
    with open(f"{filein}") as f:
        lines = f.readlines()

    lines = clean_lines(lines)
    sys.stdout.writelines(lines)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <input file>")
        exit(1)
    process_file(sys.argv[1])
